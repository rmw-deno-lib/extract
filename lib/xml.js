// Generated by CoffeeScript 2.5.1
var _pos_begin;

export var li = (xml, tag) => {
  var begin, end, pos, r, tag_len;
  r = [];
  begin = 0;
  tag_len = tag.length + 2;
  while (true) {
    pos = xml.indexOf(`<${tag}>`, begin);
    if (pos < 0) {
      return r;
    }
    begin = pos + tag_len;
    end = xml.indexOf(`</${tag}>`, begin);
    if (end < 0) {
      return r;
    }
    r.push(xml.slice(begin, end).trim());
    begin = end + tag_len + 1;
  }
};

_pos_begin = (xml, tag, offset = 0) => {
  var c, pos;
  pos = xml.indexOf(`<${tag}`, offset);
  if (pos < 0) {
    return -1;
  }
  pos = pos + tag.length + 2;
  c = xml.charAt(pos);
  switch (c) {
    case ">":
      return pos;
    case " ":
      return xml.indexOf(">", pos + 1);
  }
  return -1;
};

export var one = (xml, tag) => {
  var begin, end;
  begin = _pos_begin(xml, tag);
  if (begin < 0) {
    return;
  }
  end = xml.indexOf(`</${tag}>`, begin);
  if (end < 0) {
    return;
  }
  return xml.slice(begin, end).trim();
};

export var dict = (xml, tag_li) => {
  var r, result, tag;
  result = {};
  for (tag of tag_li) {
    r = one(xml, tag);
    if (r !== void 0) {
      result[tag] = r;
    }
  }
  return result;
};

export var Xml = Xml = class Xml {
  constructor($1) {
    this.$ = $1;
  }

  dict(tag_li) {
    return dict(this.$, tag_li);
  }

  li(tag) {
    return li(this.$, tag);
  }

  one(tag) {
    return one(this.$, tag);
  }

};

export default ($) => {
  return new Xml($);
};

//# sourceMappingURL=xml.js.map
